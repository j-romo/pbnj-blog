---
// filepath: /Users/joaco/Documents/GitHub/pbnj-blog/src/pages/blog/[...slug].astro
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import { sanityClient } from '../../lib/sanityClient';

// Define the post type for better TypeScript support
interface SanityPost {
  slug: string;
  title: string;
  body: any[];
  heroImage?: string;
  _createdAt: string;
  _updatedAt: string;
}

export async function getStaticPaths() {
  const posts: SanityPost[] = await sanityClient.fetch(`
    *[_type == "post"] {
      "slug": slug.current,
      title,
      body,
      "heroImage": heroImage.asset->url,
      _createdAt,
      _updatedAt
    }
  `);
  
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

const post: SanityPost = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={post.title} description={post.title} />
    <style>
      main {
        width: calc(100% - 2rem);
        max-width: 100%;
        margin: 0;
      }
      .hero-image {
        max-width: 720px; /* Set a maximum width for the image */
        margin: 0 auto; /* Center the image horizontally */
        padding: 1rem 0; /* Add spacing above and below */
      }
      .hero-image img {
        width: 100%;
        height: auto;
        border-radius: 8px; /* Optional: Add rounded corners */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Optional: Add a subtle shadow */
      }
      .prose {
        width: 720px;
        max-width: calc(100% - 2em);
        margin: auto;
        padding: 1em;
        color: rgb(var(--gray-dark));
      }
      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        text-align: center;
        line-height: 1;
      }
      .title h1 {
        margin: 0 0 0.5em 0;
        font-size: 2.5rem;
      }
      .date {
        margin-bottom: 0.5rem;
        color: rgb(var(--gray));
        font-size: 0.9rem;
      }
      .last-updated-on {
        font-style: italic;
        font-size: 0.8rem;
        margin-top: 0.25rem;
      }
      .content {
        line-height: 1.6;
        font-size: 1.1rem;
      }
      .content p {
        margin-bottom: 1.5rem;
      }
      @media (max-width: 720px) {
        .prose {
          padding: 0.5em;
        }
        .title h1 {
          font-size: 2rem;
        }
      }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <article>
        <!-- Hero Image -->
        {post.heroImage && (
          <div class="hero-image">
            <img 
              width={1020} 
              height={510} 
              src={post.heroImage} 
              alt={post.title}
              loading="eager"
            />
          </div>
        )}

        <!-- Content -->
        <div class="prose">
          <!-- Title and Date -->
          <div class="title">
            <div class="date">
              <FormattedDate date={new Date(post._createdAt)} />
              {post._updatedAt !== post._createdAt && (
                <div class="last-updated-on">
                  Last updated on <FormattedDate date={new Date(post._updatedAt)} />
                </div>
              )}
            </div>
            <h1>{post.title}</h1>
          </div>
          
          <!-- Post Body -->
          <div class="content">
            {post.body && post.body.length > 0 ? (
              post.body.map((block: any) => {
                // Handle different block types
                if (block._type === 'block') {
                  // Regular text blocks
                  const text = block.children
                    ?.map((child: any) => child.text)
                    .join('') || '';
                  return text.trim() ? <p>{text}</p> : null;
                }
                // Add more block type handlers here as needed (e.g., images, code blocks, etc.)
                if (block._type === 'image') {
					return (
					<img
						src={block.asset.url}
						alt={block.alt || ''}
						style="max-width: 100%; margin: 1rem 0;"
					/>
					);
				}
				// If block type is unrecognized,
				return null;
              })
            ) : (
              <p>No content available.</p>
            )}
          </div>
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>